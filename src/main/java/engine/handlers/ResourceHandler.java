/*
 Title: ResourceManager
 Date: 2023-12-06
 Author: Kyle St John
 */
package engine.handlers;

import engine.io.Audio;
import engine.graphics.Shader;
import engine.graphics.SpriteSheet;
import engine.graphics.Texture;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

/** ResourceManager class for managing shaders, textures, sprite sheets, and audio resources. */
public class ResourceHandler {

    // Maps to store instances of different resources
    private static final Map<String, Shader> shaderMap = new HashMap<>();
    private static final Map<String, Texture> textureMap = new HashMap<>();
    private static final Map<String, SpriteSheet> spriteSheetMap = new HashMap<>();
    private static final Map<String, Audio> audioMap = new HashMap<>();

    /**
     * Gets or creates a shader by its ID.
     *
     * @param shaderID The unique identifier for the shader.
     * @return The Shader object associated with the given ID.
     */
    public static Shader getOrCreateShader(String shaderID) {
        File file = new File(shaderID);
        if (!shaderMap.containsKey(shaderID)) {
            // Create a new shader and add it to the map
            Shader newShader = new Shader(shaderID);
            newShader.compileAndLinkShaders();
            shaderMap.put(file.getAbsolutePath(), newShader);
            return newShader;
        }
        // Return the existing shader if it already exists
        return shaderMap.get(file.getAbsolutePath());
    }

    /**
     * Gets or creates a texture by its ID.
     *
     * @param textureID The unique identifier for the texture.
     * @return The Texture object associated with the given ID.
     */
    public static Texture getOrCreateTexture(String textureID) {
        File file = new File(textureID);
        if (!textureMap.containsKey(textureID)) {
            // Create a new texture and add it to the map
            Texture texture = new Texture(textureID);
            textureMap.put(file.getAbsolutePath(), texture);
            return texture;
        }
        // Return the existing texture if it already exists
        return textureMap.get(file.getAbsolutePath());
    }

    /**
     * Adds a sprite sheet to the map.
     *
     * @param resourceName The unique identifier for the sprite sheet.
     * @param spriteSheet The SpriteSheet object to be added.
     */
    public static void addSpriteSheet(String resourceName, SpriteSheet spriteSheet) {
        File file = new File(resourceName);
        if (!spriteSheetMap.containsKey(file.getAbsolutePath())) {
            // Add the sprite sheet to the map if it doesn't already exist
            spriteSheetMap.put(file.getAbsolutePath(), spriteSheet);
        }
    }

    /**
     * Gets a sprite sheet from the map.
     *
     * @param resourceName The unique identifier for the sprite sheet.
     * @return The SpriteSheet object associated with the given ID, or null if not found.
     */
    public static SpriteSheet getSpriteSheet(String resourceName) {
        File file = new File(resourceName);
        return spriteSheetMap.get(file.getAbsolutePath());
    }

    /**
     * Deletes the specified file and prints a success or failure message.
     *
     * @param path The path of the file to be deleted.
     */
    public static void deleteFile(String path) {
        File fileToDelete = new File(path);

        if (fileToDelete.exists()) {
            if (fileToDelete.delete()) {
                System.out.println("File deleted successfully.");
            } else {
                System.out.println("Failed to delete the file.");
            }
        } else {
            System.out.println("File does not exist.");
        }
    }

    /**
     * Removes the reference file generated by GSON for a given file and extension.
     *
     * @param fileName      The name of the file (without extension).
     * @param directory     The directory path of the file.
     * @param fileExtension The extension of the file to be removed.
     */
    public static void removeGSONReferenceFile(String fileName, String directory, String fileExtension) {
        String GSONRef = fileName.replace(fileExtension, "txt");
        String filePath = GSONRef.replace(directory, "saved");
        deleteFile(filePath);
    }

    /**
     * Checks if the provided file path is valid by verifying if the file exists
     * and is readable.
     *
     * @param path The file path to be checked.
     * @return {@code true} if the file path is valid (exists and is readable),
     *         {@code false} otherwise.
     */
    public static boolean isValidFilePath(String path) {
        // Check if the file exists and is readable
        Path filePath = Paths.get(path);
        return Files.exists(filePath) && Files.isReadable(filePath);
    }
}
/*End of ResourceManager class*/
